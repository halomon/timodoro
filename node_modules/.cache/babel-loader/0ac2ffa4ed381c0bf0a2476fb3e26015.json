{"ast":null,"code":"var _jsxFileName = \"/Users/camintosh2/Projects/pomodoro-timer/src/Timer.js\",\n    _s = $RefreshSig$();\n\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport PlayButton from \"./PlayButton\";\nimport PauseButton from \"./PauseButton\";\nimport SettingsButton from \"./SettingsButton\";\nimport { useContext, useState, useEffect, useRef } from \"react\";\nimport SettingsContext from \"./SettingsContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst red = '#f54e4e';\nconst green = '#4aec8c';\n\nfunction Timer() {\n  _s();\n\n  const settingsInfo = useContext(SettingsContext);\n  const [isPaused, setIsPaused] = useState(true);\n  const [mode, setMode] = useState('work'); // work/break/null\n\n  const [secondsLeft, setSecondsLeft] = useState(0);\n  const secondsLeftRef = useRef(secondsLeft);\n  const isPausedRef = useRef(isPaused);\n  const modeRef = useRef(mode);\n\n  function tick() {\n    secondsLeftRef.current--;\n    setSecondsLeft(secondsLeftRef.current);\n  }\n\n  useEffect(() => {\n    function switchMode() {\n      const nextMode = modeRef.current === 'work' ? 'break' : 'work';\n      const nextSeconds = (nextMode === 'work' ? settingsInfo.workMinutes : settingsInfo.breakMinutes) * 60;\n      setMode(nextMode);\n      modeRef.current = nextMode;\n      setSecondsLeft(nextSeconds);\n      secondsLeftRef.current = nextSeconds;\n    }\n\n    secondsLeftRef.current = settingsInfo.workMinutes * 60;\n    setSecondsLeft(secondsLeftRef.current);\n    const interval = setInterval(() => {\n      if (isPausedRef.current) {\n        return;\n      }\n\n      if (secondsLeftRef.current === 0) {\n        return switchMode();\n      }\n\n      tick();\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [settingsInfo]);\n  const totalSeconds = mode === 'work' ? settingsInfo.workMinutes * 60 : settingsInfo.breakMinutes * 60;\n  const percentage = Math.round(secondsLeft / totalSeconds * 100);\n  const minutes = Math.floor(secondsLeft / 60);\n  let seconds = secondsLeft % 60;\n  if (seconds < 10) seconds = '0' + seconds;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CircularProgressbar, {\n      value: percentage,\n      text: minutes + ':' + seconds,\n      styles: buildStyles({\n        textColor: '#fff',\n        pathColor: mode === 'work' ? red : green,\n        tailColor: 'rgba(255,255,255,.2)'\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: isPaused ? /*#__PURE__*/_jsxDEV(PlayButton, {\n        onClick: () => {\n          setIsPaused(false);\n          isPausedRef.current = false;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(PauseButton, {\n        onClick: () => {\n          setIsPaused(true);\n          isPausedRef.current = true;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(SettingsButton, {\n        onClick: () => settingsInfo.setShowSettings(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Timer, \"wLsOXioxHyC+0a8S06ETGdtL+3A=\");\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["/Users/camintosh2/Projects/pomodoro-timer/src/Timer.js"],"names":["CircularProgressbar","buildStyles","PlayButton","PauseButton","SettingsButton","useContext","useState","useEffect","useRef","SettingsContext","red","green","Timer","settingsInfo","isPaused","setIsPaused","mode","setMode","secondsLeft","setSecondsLeft","secondsLeftRef","isPausedRef","modeRef","tick","current","switchMode","nextMode","nextSeconds","workMinutes","breakMinutes","interval","setInterval","clearInterval","totalSeconds","percentage","Math","round","minutes","floor","seconds","textColor","pathColor","tailColor","marginTop","setShowSettings"],"mappings":"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","sourcesContent":["import { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport PlayButton from \"./PlayButton\";\nimport PauseButton from \"./PauseButton\";\nimport SettingsButton from \"./SettingsButton\";\nimport {useContext, useState, useEffect, useRef} from \"react\";\nimport SettingsContext from \"./SettingsContext\";\n\nconst red = '#f54e4e';\nconst green = '#4aec8c';\n\nfunction Timer() {\n  const settingsInfo = useContext(SettingsContext);\n\n  const [isPaused, setIsPaused] = useState(true);\n  const [mode, setMode] = useState('work'); // work/break/null\n  const [secondsLeft, setSecondsLeft] = useState(0);\n\n  const secondsLeftRef = useRef(secondsLeft);\n  const isPausedRef = useRef(isPaused);\n  const modeRef = useRef(mode);\n\n  function tick() {\n    secondsLeftRef.current--;\n    setSecondsLeft(secondsLeftRef.current);\n  }\n\n  useEffect(() => {\n\n    function switchMode() {\n      const nextMode = modeRef.current === 'work' ? 'break' : 'work';\n      const nextSeconds = (nextMode === 'work' ? settingsInfo.workMinutes : settingsInfo.breakMinutes) * 60;\n\n      setMode(nextMode);\n      modeRef.current = nextMode;\n\n      setSecondsLeft(nextSeconds);\n      secondsLeftRef.current = nextSeconds;\n    }\n\n    secondsLeftRef.current = settingsInfo.workMinutes * 60;\n    setSecondsLeft(secondsLeftRef.current);\n\n    const interval = setInterval(() => {\n      if (isPausedRef.current) {\n        return;\n      }\n      if (secondsLeftRef.current === 0) {\n        return switchMode();\n      }\n\n      tick();\n    },1000);\n\n    return () => clearInterval(interval);\n  }, [settingsInfo]);\n\n  const totalSeconds = mode === 'work'\n    ? settingsInfo.workMinutes * 60\n    : settingsInfo.breakMinutes * 60;\n  const percentage = Math.round(secondsLeft / totalSeconds * 100);\n\n  const minutes = Math.floor(secondsLeft / 60);\n  let seconds = secondsLeft % 60;\n  if(seconds < 10) seconds = '0'+seconds;\n\n  return (\n    <div>\n      <CircularProgressbar\n        value={percentage}\n        text={minutes + ':' + seconds}\n        styles={buildStyles({\n        textColor:'#fff',\n        pathColor:mode === 'work' ? red : green,\n        tailColor:'rgba(255,255,255,.2)',\n      })} />\n      <div style={{marginTop:'20px'}}>\n        {isPaused\n          ? <PlayButton onClick={() => { setIsPaused(false); isPausedRef.current = false; }} />\n          : <PauseButton onClick={() => { setIsPaused(true); isPausedRef.current = true; }} />}\n      </div>\n      <div style={{marginTop:'20px'}}>\n        <SettingsButton onClick={() => settingsInfo.setShowSettings(true)} />\n      </div>\n    </div>\n  );\n}\n\nexport default Timer;"]},"metadata":{},"sourceType":"module"}