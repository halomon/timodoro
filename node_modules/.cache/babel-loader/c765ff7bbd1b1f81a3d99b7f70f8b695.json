{"ast":null,"code":"var _jsxFileName = \"/Users/camintosh2/Projects/pomodoro-timer/src/Timer.js\",\n    _s = $RefreshSig$();\n\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport { useContext, useState, useEffect, useRef } from 'react';\nimport PlayButton from './PlayButton';\nimport PauseButton from './PauseButton';\nimport SettingsButton from './SettingsButton';\nimport SettingsContext from './SettingsContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst red = '#f54e4e';\nconst green = '#4aec8c';\n\nfunction Timer() {\n  _s();\n\n  const settingsInfo = useContext(SettingsContext);\n  const [isPaused, setIsPaused] = useState(false);\n  const [mode, setMode] = useState('work'); //work/break/null\n\n  const [secondsLeft, setSecondsLeft] = useState(0);\n  const secondsLeftRef = useRef(secondsLeft);\n  const isPausedRef = useRef(isPaused);\n  const modeRef = useRef(mode);\n\n  function switchMode() {\n    const nextMode = mode === 'work' ? 'break' : 'work';\n    const nextSeconds = nextMode === 'work' ? settingsInfo.workMinutes : settingsInfo.breakMinutes;\n    setMode(nextMode);\n    modeRef.current = nextMode;\n    setSecondsLeft(nextSeconds);\n    secondsLeftRef.current = nextSeconds;\n  }\n\n  function tick() {\n    secondsLeftRef.current--;\n    setSecondsLeft(secondsLeftRef.current);\n  }\n\n  function initTimer() {\n    setSecondsLeft(settingsInfo.workMinutes * 60);\n  }\n\n  useEffect(() => {\n    initTimer();\n    setInterval(() => {\n      if (isPausedRef.current) {\n        return;\n      }\n\n      if (secondsLeftRef.current === 0) {\n        return switchMode();\n      }\n\n      tick();\n    }, 1000);\n  }, [settingsInfo]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CircularProgressbar, {\n      value: 69,\n      text: `69%`,\n      styles: buildStyles({\n        textColor: '#fff',\n        pathColor: red,\n        tailColor: 'rgba(255,255,255,.2)'\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: isPaused ? /*#__PURE__*/_jsxDEV(PlayButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(PauseButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 42\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(SettingsButton, {\n        onClick: () => settingsInfo.setShowSettings(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Timer, \"8UfcJsB7Z0Dli6wtkeC0VPkVLf0=\");\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["/Users/camintosh2/Projects/pomodoro-timer/src/Timer.js"],"names":["CircularProgressbar","buildStyles","useContext","useState","useEffect","useRef","PlayButton","PauseButton","SettingsButton","SettingsContext","red","green","Timer","settingsInfo","isPaused","setIsPaused","mode","setMode","secondsLeft","setSecondsLeft","secondsLeftRef","isPausedRef","modeRef","switchMode","nextMode","nextSeconds","workMinutes","breakMinutes","current","tick","initTimer","setInterval","textColor","pathColor","tailColor","marginTop","setShowSettings"],"mappings":"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","sourcesContent":["import { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport { useContext, useState, useEffect, useRef } from 'react';\nimport PlayButton from './PlayButton';\nimport PauseButton from './PauseButton';\nimport SettingsButton from './SettingsButton';\nimport SettingsContext from './SettingsContext';\n\nconst red = '#f54e4e';\n\nconst green = '#4aec8c';\n\nfunction Timer() {\n    const settingsInfo = useContext(SettingsContext);\n\n    const [isPaused, setIsPaused] = useState(false);\n    const [mode, setMode] = useState('work'); //work/break/null\n    const [secondsLeft, setSecondsLeft ] = useState(0);\n\n    const secondsLeftRef = useRef(secondsLeft);\n    const isPausedRef = useRef(isPaused);\n    const modeRef = useRef(mode);\n\n    function switchMode() {\n        const nextMode = mode === 'work'? 'break' : 'work';\n        const nextSeconds = (nextMode === 'work' ? settingsInfo.workMinutes : settingsInfo.breakMinutes);\n        setMode(nextMode);\n        modeRef.current = nextMode;\n        setSecondsLeft(nextSeconds);\n        secondsLeftRef.current = nextSeconds\n    }\n\n    function tick() {\n        secondsLeftRef.current--;\n\n        setSecondsLeft(secondsLeftRef.current);\n    }\n\n    function initTimer() {\n        setSecondsLeft(settingsInfo.workMinutes * 60);\n    }\n\n    useEffect(() => {\n        initTimer();\n\n        setInterval(() => {\n            if (isPausedRef.current) {\n                return;\n            }\n            if (secondsLeftRef.current === 0) {\n                return switchMode();\n            }\n\n            tick();\n        }, 1000);\n    }, [settingsInfo]);\n\n    return (\n    <div>\n        <CircularProgressbar\n        value={69} \n        text={`69%`}\n        styles={buildStyles({\n            textColor:'#fff',\n            pathColor:red,\n            tailColor:'rgba(255,255,255,.2)',\n    \n        })}/>\n        <div style={{marginTop:'20px'}}>\n            {isPaused ? <PlayButton /> : <PauseButton />}\n\n            </div>\n            <div style={{marginTop:'20px'}}>\n                <SettingsButton onClick={() => settingsInfo.setShowSettings(true)} />\n            </div>\n    </div>\n    );\n    \n}\n\nexport default Timer;"]},"metadata":{},"sourceType":"module"}