{"ast":null,"code":"var _jsxFileName = \"/Users/camintosh2/Projects/timodoro/src/Timer.js\",\n    _s = $RefreshSig$();\n\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport PlayButton from './PlayButton';\nimport PauseButton from './PauseButton';\nimport SettingsButton from './SettingsButton';\nimport { useContext, useState, useEffect, useRef } from 'react';\nimport SettingsContext from './SettingsContext';\nimport MoveBack from './MoveBack';\nimport Wave from 'react-wavify'; //<MoveBack />;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst red = '#f54e4e';\nconst green = '#4aec8c';\n\nfunction Timer() {\n  _s();\n\n  const settingsInfo = useContext(SettingsContext);\n  const [isPaused, setIsPaused] = useState(false);\n  const [mode, setMode] = useState('work'); //work/break/null\n\n  const [secondsLeft, setSecondsLeft] = useState(0);\n  const secondsLeftRef = useRef(secondsLeft);\n  const isPausedRef = useRef(isPaused);\n  const modeRef = useRef(mode);\n\n  function tick() {\n    secondsLeftRef.current--;\n    setSecondsLeft(secondsLeftRef.current);\n  }\n\n  useEffect(() => {\n    function switchMode() {\n      const nextMode = modeRef.current === 'work' ? 'break' : 'work';\n      const nextSeconds = (nextMode === 'work' ? settingsInfo.workMinutes : settingsInfo.breakMinutes) * 60;\n      setMode(nextMode);\n      modeRef.current = nextMode;\n      setSecondsLeft(nextSeconds);\n      secondsLeftRef.current = nextSeconds;\n    }\n\n    secondsLeftRef.current = settingsInfo.workMinutes * 60;\n    setSecondsLeft(secondsLeftRef.current);\n    const interval = setInterval(() => {\n      if (isPausedRef.current) {\n        return;\n      }\n\n      if (secondsLeftRef.current === 0) {\n        return switchMode();\n      }\n\n      tick();\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [settingsInfo]);\n  const totalSeconds = mode === 'work' ? settingsInfo.workMinutes * 60 : settingsInfo.breakMinutes * 60;\n  const percentage = Math.round(secondsLeft / totalSeconds * 100);\n  const minutes = Math.floor(secondsLeft / 60); //math.floor because if result is 44.8... want 44 min\n\n  let seconds = secondsLeft % 60;\n  if (seconds < 10) seconds = '0' + seconds;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"      \", /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"wave\",\n      children: /*#__PURE__*/_jsxDEV(Wave, {\n        style: {\n          zIndex: 10\n        },\n        options: {\n          speed: 0.5\n        },\n        fill: \"#257\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(CircularProgressbar, {\n      value: percentage,\n      text: minutes + ':' + seconds //{percentage+`%`}\n      ,\n      styles: buildStyles({\n        textColor: 'rgba(255,255,255,0.8)',\n        pathColor: mode === 'work' ? 'var(--red)' : 'var(--green)',\n        tailColor: 'rgba(255,255,255,.2)'\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: isPaused ? /*#__PURE__*/_jsxDEV(PlayButton, {\n        onClick: () => {\n          setIsPaused(false);\n          isPausedRef.current = false;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(PauseButton, {\n        onClick: () => {\n          setIsPaused(true);\n          isPausedRef.current = true;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(SettingsButton, {\n        onClick: () => settingsInfo.setShowSettings(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Timer, \"8UfcJsB7Z0Dli6wtkeC0VPkVLf0=\");\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["/Users/camintosh2/Projects/timodoro/src/Timer.js"],"names":["CircularProgressbar","buildStyles","PlayButton","PauseButton","SettingsButton","useContext","useState","useEffect","useRef","SettingsContext","MoveBack","Wave","red","green","Timer","settingsInfo","isPaused","setIsPaused","mode","setMode","secondsLeft","setSecondsLeft","secondsLeftRef","isPausedRef","modeRef","tick","current","switchMode","nextMode","nextSeconds","workMinutes","breakMinutes","interval","setInterval","clearInterval","totalSeconds","percentage","Math","round","minutes","floor","seconds","zIndex","speed","textColor","pathColor","tailColor","marginTop","setShowSettings"],"mappings":"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","sourcesContent":["import { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport PlayButton from './PlayButton';\nimport PauseButton from './PauseButton';\nimport SettingsButton from './SettingsButton';\nimport { useContext, useState, useEffect, useRef } from 'react';\nimport SettingsContext from './SettingsContext';\nimport MoveBack from './MoveBack';\nimport Wave from 'react-wavify';\n\n//<MoveBack />;\n\n\nconst red = '#f54e4e';\nconst green = '#4aec8c';\n\nfunction Timer() {\n    \n    const settingsInfo = useContext(SettingsContext);\n\n    const [isPaused, setIsPaused] = useState(false);\n    const [mode, setMode] = useState('work'); //work/break/null\n    const [secondsLeft, setSecondsLeft ] = useState(0);\n\n    const secondsLeftRef = useRef(secondsLeft);\n    const isPausedRef = useRef(isPaused);\n    const modeRef = useRef(mode);\n\n    function tick() {\n        secondsLeftRef.current--;\n        setSecondsLeft(secondsLeftRef.current);\n    }\n\n    useEffect(() => {\n\n        function switchMode() {\n            const nextMode = modeRef.current === 'work' ? 'break' : 'work';\n            const nextSeconds = (nextMode === 'work' ? settingsInfo.workMinutes : settingsInfo.breakMinutes) * 60;\n            \n            setMode(nextMode);\n            modeRef.current = nextMode;\n\n            setSecondsLeft(nextSeconds);\n            secondsLeftRef.current = nextSeconds;\n        }\n\n        secondsLeftRef.current = settingsInfo.workMinutes * 60;\n        setSecondsLeft(secondsLeftRef.current);\n\n        const interval = setInterval(() => {\n            if (isPausedRef.current) {\n              return;\n            }\n            if (secondsLeftRef.current === 0) {\n              return switchMode();\n            }\n      \n            tick();\n          },1000);\n        \n        return () => clearInterval(interval);\n    }, [settingsInfo]);\n\n    const totalSeconds = mode === 'work' \n        ? settingsInfo.workMinutes * 60 \n        : settingsInfo.breakMinutes * 60;\n    const percentage = Math.round(secondsLeft / totalSeconds * 100);\n\n    const minutes = Math.floor(secondsLeft / 60); //math.floor because if result is 44.8... want 44 min\n    let seconds = secondsLeft % 60;\n    if(seconds < 10 ) seconds = '0'+seconds;\n\n    return (\n\n        \n        \n\n    <div>      <div id=\"wave\">\n    <Wave style={{ zIndex: 10 }} options={{ speed: 0.5 }} fill=\"#257\" />\n    </div>\n        \n        <CircularProgressbar\n        value={percentage} \n        text={minutes + ':' + seconds}//{percentage+`%`}\n        styles={buildStyles({\n            textColor:'rgba(255,255,255,0.8)',\n            pathColor:mode === 'work' ? 'var(--red)' : 'var(--green)',\n            tailColor:'rgba(255,255,255,.2)',\n        })}/>\n        <div style={{marginTop:'20px'}}>\n            {isPaused \n            ? <PlayButton onClick={() => { setIsPaused(false); isPausedRef.current = false; }} /> \n            : <PauseButton onClick={() => { setIsPaused(true); isPausedRef.current = true; }} />}\n            </div>\n            <div style={{marginTop:'20px'}}>\n                <SettingsButton onClick={() => settingsInfo.setShowSettings(true)} />\n            </div>\n    </div>\n    );\n}\n\nexport default Timer;"]},"metadata":{},"sourceType":"module"}